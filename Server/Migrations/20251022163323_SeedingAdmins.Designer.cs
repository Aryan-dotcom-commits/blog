// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251022163323_SeedingAdmins")]
    partial class SeedingAdmins
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("adminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("adminEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("adminName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("adminPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("adminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.Entities.AdminProfile", b =>
                {
                    b.Property<Guid>("profileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActivityLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("TargetWeight")
                        .HasColumnType("integer");

                    b.Property<Guid>("adminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("profileId");

                    b.HasIndex("adminId")
                        .IsUnique();

                    b.ToTable("AdminProfiles");
                });

            modelBuilder.Entity("Domain.Entities.Calories", b =>
                {
                    b.Property<Guid>("CalorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastCalorieUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NetCalories")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCaloriesBurned")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCaloriesConsumed")
                        .HasColumnType("integer");

                    b.Property<Guid>("adminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("logDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CalorieId");

                    b.HasIndex("adminId");

                    b.ToTable("Calories");
                });

            modelBuilder.Entity("Domain.Entities.ExerciseLogs", b =>
                {
                    b.Property<Guid>("exerciseLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CaloriesBurned")
                        .HasColumnType("integer");

                    b.Property<int>("DurationInMinues")
                        .HasColumnType("integer");

                    b.Property<int>("RepsPerSet")
                        .HasColumnType("integer");

                    b.Property<int>("TotalReps")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSets")
                        .HasColumnType("integer");

                    b.Property<Guid>("adminId")
                        .HasColumnType("uuid");

                    b.Property<int>("bodyPart")
                        .HasColumnType("integer");

                    b.Property<DateTime>("exerciseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("exerciseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("exerciseLogId");

                    b.HasIndex("adminId");

                    b.ToTable("ExerciseLogs");
                });

            modelBuilder.Entity("Domain.Entities.FoodLogs", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CaloriesPerUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("Carbs")
                        .HasColumnType("integer");

                    b.Property<int?>("Fats")
                        .HasColumnType("integer");

                    b.Property<int>("FoodCategory")
                        .HasColumnType("integer");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FoodQuantities")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Protein")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCalories")
                        .HasColumnType("integer");

                    b.Property<Guid>("adminId")
                        .HasColumnType("uuid");

                    b.HasKey("FoodId");

                    b.HasIndex("adminId");

                    b.ToTable("FoodLogs");
                });

            modelBuilder.Entity("Domain.Entities.HeightLogs", b =>
                {
                    b.Property<Guid>("heightLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentHeight")
                        .HasColumnType("integer");

                    b.Property<int>("HeightUnit")
                        .HasColumnType("integer");

                    b.Property<Guid>("adminId")
                        .HasColumnType("uuid");

                    b.HasKey("heightLogId");

                    b.HasIndex("adminId");

                    b.ToTable("HeightLogs");
                });

            modelBuilder.Entity("Domain.Entities.WeightLogs", b =>
                {
                    b.Property<Guid>("weightLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentWeight")
                        .HasColumnType("integer");

                    b.Property<bool>("IsGoalAchieved")
                        .HasColumnType("boolean");

                    b.Property<int>("WeightUnit")
                        .HasColumnType("integer");

                    b.Property<Guid>("adminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("loggedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("weightLogId");

                    b.HasIndex("adminId");

                    b.ToTable("WeightLogs");
                });

            modelBuilder.Entity("Domain.Entities.AdminProfile", b =>
                {
                    b.HasOne("Domain.Entities.Admin", "Admin")
                        .WithOne("AdminProfile")
                        .HasForeignKey("Domain.Entities.AdminProfile", "adminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Domain.Entities.Calories", b =>
                {
                    b.HasOne("Domain.Entities.Admin", "Admin")
                        .WithMany("Calories")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Domain.Entities.ExerciseLogs", b =>
                {
                    b.HasOne("Domain.Entities.Admin", "Admin")
                        .WithMany("ExerciseLogs")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Domain.Entities.FoodLogs", b =>
                {
                    b.HasOne("Domain.Entities.Admin", "Admin")
                        .WithMany("FoodLogs")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Domain.Entities.HeightLogs", b =>
                {
                    b.HasOne("Domain.Entities.Admin", "Admin")
                        .WithMany("HeightLogs")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Domain.Entities.WeightLogs", b =>
                {
                    b.HasOne("Domain.Entities.Admin", "Admin")
                        .WithMany("WeightLogs")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Navigation("AdminProfile")
                        .IsRequired();

                    b.Navigation("Calories");

                    b.Navigation("ExerciseLogs");

                    b.Navigation("FoodLogs");

                    b.Navigation("HeightLogs");

                    b.Navigation("WeightLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
